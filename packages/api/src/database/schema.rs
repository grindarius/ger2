//! Stores information about database's tables and types. This file is automagically
//! generated. Please do not edit this file by hand at all means.

use super::custom_types::*;

#[allow(dead_code)]
pub enum DayOfWeekIden {
    Type,
    Sunday,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
}

impl ::sea_query::Iden for DayOfWeekIden {
    fn unquoted(&self, s: &mut dyn ::std::fmt::Write) {
        write!(
            s,
            "{}",
            match self {
                Self::Type => "day_of_week",
                Self::Sunday => "sunday",
                Self::Monday => "monday",
                Self::Tuesday => "tuesday",
                Self::Wednesday => "wednesday",
                Self::Thursday => "thursday",
                Self::Friday => "friday",
                Self::Saturday => "saturday",
            }
        )
        .unwrap()
    }
}

#[allow(dead_code)]
pub enum PaymentStatusIden {
    Type,
    Pending,
    Completed,
    Cancelled,
}

impl ::sea_query::Iden for PaymentStatusIden {
    fn unquoted(&self, s: &mut dyn ::std::fmt::Write) {
        write!(
            s,
            "{}",
            match self {
                Self::Type => "payment_status",
                Self::Pending => "pending",
                Self::Completed => "completed",
                Self::Cancelled => "cancelled",
            }
        )
        .unwrap()
    }
}

#[allow(dead_code)]
pub enum RoleIden {
    Type,
    Admin,
    Professor,
    Student,
}

impl ::sea_query::Iden for RoleIden {
    fn unquoted(&self, s: &mut dyn ::std::fmt::Write) {
        write!(
            s,
            "{}",
            match self {
                Self::Type => "role",
                Self::Admin => "admin",
                Self::Professor => "professor",
                Self::Student => "student",
            }
        )
        .unwrap()
    }
}

#[allow(dead_code)]
pub enum RoomTypeIden {
    Type,
    Lab,
    Lecture,
    Conference,
    Toilet,
    CoWorkingSpaces,
    Work,
    Other,
}

impl ::sea_query::Iden for RoomTypeIden {
    fn unquoted(&self, s: &mut dyn ::std::fmt::Write) {
        write!(
            s,
            "{}",
            match self {
                Self::Type => "room_type",
                Self::Lab => "lab",
                Self::Lecture => "lecture",
                Self::Conference => "conference",
                Self::Toilet => "toilet",
                Self::CoWorkingSpaces => "co-working-spaces",
                Self::Work => "work",
                Self::Other => "other",
            }
        )
        .unwrap()
    }
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct AcademicYears {
    id: ::std::string::String,
    year: ::std::primitive::i32,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Buildings {
    id: ::std::string::String,
    name: ::std::string::String,
    coordinates: ::geo_types::Point<f64>,
    building_created_at: ::time::OffsetDateTime,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Curriculums {
    id: ::std::string::String,
    name: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Faculties {
    id: ::std::string::String,
    name: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct ForumMembers {
    forum_id: ::std::string::String,
    user_id: ::std::string::String,
    role_id: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct ForumPostComments {
    id: ::std::string::String,
    forum_post_id: ::std::string::String,
    forum_member_id: ::std::string::String,
    content: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct ForumPosts {
    id: ::std::string::String,
    forum_member_id: ::std::string::String,
    name: ::std::string::String,
    content: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct ForumRoles {
    id: ::std::string::String,
    name: ::std::string::String,
    description: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Forums {
    id: ::std::string::String,
    user_id: ::std::string::String,
    name: ::std::string::String,
    slug: ::std::string::String,
    description: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct MajorSubjectGroups {
    id: ::std::string::String,
    major_id: ::std::string::String,
    group_index: ::std::primitive::i32,
    parent_id: ::std::option::Option<::std::string::String>,
    name: ::std::string::String,
    minimum_credit: ::std::option::Option<::rust_decimal::Decimal>,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct MajorSubjects {
    major_subject_group_id: ::std::string::String,
    subject_id: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Majors {
    id: ::std::string::String,
    curriculum_id: ::std::string::String,
    faculty_id: ::std::string::String,
    academic_year_id: ::std::string::String,
    name: ::std::string::String,
    minimum_gpa: ::rust_decimal::Decimal,
    year_amount: ::std::primitive::i16,
    minimum_credit: ::std::primitive::i32,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectAdditionalEligibleStudents {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    student_id: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectAssignments {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    name: ::std::string::String,
    full_score: ::rust_decimal::Decimal,
    percentage: ::rust_decimal::Decimal,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectEligibleMajors {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    major_id: ::std::string::String,
    academic_year_id: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectProfessors {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    professor_id: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectSchedules {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    room_id: ::std::string::String,
    day: DayOfWeek,
    start: ::time::Time,
    end: ::time::Time,
    timezone: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectStudentAssignments {
    id: ::std::string::String,
    opening_subject_student_enrollment_id: ::std::string::String,
    opening_subject_assignment_id: ::std::string::String,
    score: ::rust_decimal::Decimal,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjectStudentEnrollments {
    id: ::std::string::String,
    opening_subject_id: ::std::string::String,
    student_id: ::std::string::String,
    class_comment: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct OpeningSubjects {
    id: ::std::string::String,
    subject_id: ::std::string::String,
    semester_id: ::std::string::String,
    subject_capacity: ::std::primitive::i32,
    grading_criteria: ::serde_json::Value,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Professors {
    user_id: ::std::string::String,
    description: ::std::string::String,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Rooms {
    id: ::std::string::String,
    building_id: ::std::string::String,
    name: ::std::string::String,
    room_type: RoomType,
    capacity: ::std::primitive::i32,
    floor: ::std::primitive::i32,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct SemesterDateNames {
    id: ::std::string::String,
    name: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct SemesterDates {
    semester_date_name_id: ::std::string::String,
    semester_id: ::std::string::String,
    start: ::time::OffsetDateTime,
    end: ::time::OffsetDateTime,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Semesters {
    id: ::std::string::String,
    academic_year_id: ::std::string::String,
    start: ::time::OffsetDateTime,
    end: ::time::OffsetDateTime,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Students {
    user_id: ::std::string::String,
    major_id: ::std::string::String,
    academic_year_id: ::std::string::String,
    professor_id: ::std::string::String,
    student_id: ::std::string::String,
    student_behavior_score: ::std::primitive::i32,
    student_status: ::serde_json::Value,
    previous_gpa: ::rust_decimal::Decimal,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Subjects {
    id: ::std::string::String,
    name: ::std::string::String,
    description: ::std::string::String,
    credit: ::std::primitive::i32,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Transactions {
    id: ::std::string::String,
    user_id: ::std::string::String,
    price: ::rust_decimal::Decimal,
    payment_status: PaymentStatus,
    transaction_type: ::serde_json::Value,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct UserNames {
    id: ::std::string::String,
    user_id: ::std::string::String,
    name_language: ::std::string::String,
    first_name: ::std::string::String,
    middle_name: ::std::string::String,
    last_name: ::std::string::String,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct UserSessions {
    id: ::std::string::String,
    user_id: ::std::string::String,
    expires_at: ::time::OffsetDateTime,
}

#[allow(dead_code)]
#[sea_query::enum_def]
pub struct Users {
    id: ::std::string::String,
    username: ::std::string::String,
    email: ::std::string::String,
    password: ::std::string::String,
    role: Role,
    birthdate: ::time::Date,
    created_at: ::time::OffsetDateTime,
    updated_at: ::time::OffsetDateTime,
}
